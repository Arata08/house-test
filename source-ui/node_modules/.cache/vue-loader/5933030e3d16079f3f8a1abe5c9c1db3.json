{"remainingRequest":"D:\\WD\\study\\微信小程序\\house-master (1)\\source-vue-ui-master\\source-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WD\\study\\微信小程序\\house-master (1)\\source-vue-ui-master\\source-ui\\src\\views\\tool\\build\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\WD\\study\\微信小程序\\house-master (1)\\source-vue-ui-master\\source-ui\\src\\views\\tool\\build\\index.vue","mtime":1711629746000},{"path":"D:\\WD\\study\\微信小程序\\house-master (1)\\source-vue-ui-master\\source-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1713447933757},{"path":"D:\\WD\\study\\微信小程序\\house-master (1)\\source-vue-ui-master\\source-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713447874049},{"path":"D:\\WD\\study\\微信小程序\\house-master (1)\\source-vue-ui-master\\source-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1713447946641}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}